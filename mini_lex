
%{
#include"y.tab.h"
int currLine = 1, currPos = 1;
char id[100][10];
int count = 0;
% }



%%
quit              {return 0;}
##[^\n]*          {/* ignore spaces */ currPos += yyleng;}
beginparams       {currPos += yyleng; return BEGIN_PARAMS;}
endparams         {currPos += yyleng; return END_PARAMS;}
beginlocals       {currPos += yyleng; return BEGIN_LOCALS;}
endlocals         {currPos += yyleng; return END_LOCALS;}
beginbody         {currPos += yyleng; return BEGIN_BODY;}
endbody           {currPos += yyleng; return END_BODY;}
beginloop         {currPos += yyleng; return BEGINLOOP;}
endloop           {currPos += yyleng; return ENDLOOP;}

if                {currPos += yyleng; return IF;}
else              {currPos += yyleng; return ELSE;}
endif             {currPos += yyleng; return ENDIF;}
function          {currPos += yyleng; return FUNCTION;}
integer           {currPos += yyleng; return INTEGER;}
then              {currPos += yyleng; return THEN;}
return            {currPos += yyleng; return RETURN;}
read              {currPos += yyleng; return READ;}
break              {currPos += yyleng; return BREAK;}
do                {currPos += yyleng; return DO;}
write             {currPos += yyleng; return WRITE;}
of                {currPos += yyleng; return OF;}
continue          {currPos += yyleng; return CONTINUE;}
while             {currPos += yyleng; return WHILE;}
foreach               {currPos += yyleng; return FOREACH;} 
for               {currPos += yyleng; return FOR;}
array             {currPos += yyleng; return ARRAY;}
and               {currPos += yyleng; return AND;}
or                {currPos += yyleng; return OR;}
true              {currPos += yyleng; return TRUE;}
false             {currPos += yyleng; return FALSE;}
in             	  {currPos += yyleng; return IN;}
";"               {currPos += yyleng; return SEMICOLON;}
":"               {currPos += yyleng; return COLON;}
"("               {currPos += yyleng; return L_PAREN;}
")"               {currPos += yyleng; return R_PAREN;}
"["               {currPos += yyleng; return L_SQUARE_BRACKET;}
"]"               {currPos += yyleng; return R_SQUARE_BRACKET;}
"<="              {currPos += yyleng; return LTE;}
"<"               {currPos += yyleng; return LT;}
">="              {currPos += yyleng; return GTE;}
">"               {currPos += yyleng; return GT;}
"-"               {currPos += yyleng; return SUB;}
"+"               {currPos += yyleng; return ADD;}
"*"               {currPos += yyleng; return MULT;}
"/"               {currPos += yyleng; return DIV;}
":="              {currPos += yyleng; return ASSIGN;}
"=="              {currPos += yyleng; return EQ;}
"<>"              {currPos += yyleng; return NEQ; }
","               {currPos += yyleng; return COMMA;}
"%"               {currPos += yyleng; return MOD;}

""
[0-9]+            {currPos += yyleng; return NUMBER;}
[ \t]+            {/* ignore spaces */ currPos += yyleng;}
[a-zA-Z]([0-9a-zA-Z_]*[0-9a-zA-Z])? { currPos += yyleng; yylval.strval = strdup(yytext); count++; return IDENT;}

[0-9_]+[0-9a-zA-Z_]*   {printf("Error at line %d, column %d:IDENT should not begin with digit or underscore \n", currLine, currPos);}
[a-zA-Z]([0-9a-zA-Z_]*[0-9a-zA-Z])?_+   {printf("Error at line %d, column %d:IDENT can not end with underscore \n", currLine, currPos);}



"\n"              {currLine++; currPos = 1;}


.              {return WRONG; }
%%



